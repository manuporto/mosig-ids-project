/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package overlay;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import overlay.external.ClientListener;
import overlay.external.ExternalMessage;
import overlay.network.NetworkInfo;
import overlay.network.physical.Router;
import overlay.network.virtual.Message;
import overlay.network.virtual.VirtualRouter;

import java.io.IOException;
import java.util.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeoutException;

public class App {
    private BlockingQueue<ExternalMessage> externalMessages;
    private BlockingQueue<Message> incomingMessages;
    private BlockingQueue<Message> outgoingMessages;

    private App() {
        externalMessages = new LinkedBlockingQueue<>();
        incomingMessages = new LinkedBlockingQueue<>();
        outgoingMessages = new LinkedBlockingQueue<>();
    }

    public static void main(String[] args) throws IOException, TimeoutException, InterruptedException {
        System.setProperty(org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "TRACE");
        Logger logger = LoggerFactory.getLogger(App.class);

        int virtualID = -1;
        if (args.length == 1) {
            virtualID = Integer.parseInt(args[0]);
        }
        if (virtualID < 0) {
            logger.error("Incorrect number or value of arguments.\n Usage: java App <nodeID>");
            return;
        }
        logger.debug("Running with virtual ID: " + virtualID);
        App app = new App();
        String host = "localhost";
        int port = 5672;
        String exchangeName = "defaultExchange";
        Map<Integer, Integer> tagTranslations = new HashMap<>();
        tagTranslations.put(0, 0);
        tagTranslations.put(1, 1);
        List<List<Integer>> pTopo = Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 0));
        List<List<Integer>> vTopo = Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 0));

        NetworkInfo netInfo = new NetworkInfo(host, port, exchangeName, virtualID, tagTranslations, pTopo, vTopo);

        Router router = new Router(netInfo, app.incomingMessages, app.outgoingMessages);
        VirtualRouter vRouter = new VirtualRouter(netInfo, app.externalMessages, app.incomingMessages, app.outgoingMessages);
        ClientListener cl = new ClientListener(app.externalMessages);
        cl.start();
        Thread routerThread = new Thread(router);
        routerThread.start();
        Thread virtualRouterThread = new Thread(vRouter);
        virtualRouterThread.start();

        Scanner in = new Scanner(System.in);
        logger.info("Enter Q for stopping the node.");
        String quit = in.nextLine();

        while (!quit.equalsIgnoreCase("q")) {
            logger.info("Enter Q for stopping the node.");
            quit = in.nextLine();
        }

        logger.debug("Stopping node...");
        cl.stop();
        routerThread.interrupt();
        virtualRouterThread.interrupt();
        routerThread.join();
        virtualRouterThread.join();
        logger.debug("Node stopped.");
    }
}
