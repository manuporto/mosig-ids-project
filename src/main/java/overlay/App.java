/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package overlay;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.impl.SimpleLogger;
import overlay.external.ClientListener;
import overlay.external.ExternalMessage;
import overlay.network.NetworkInfo;
import overlay.network.physical.Router;
import overlay.network.virtual.Message;
import overlay.network.virtual.VirtualRouter;
import overlay.util.NetworkFileParser;

import java.io.IOException;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeoutException;

public class App {
    private BlockingQueue<ExternalMessage> externalMessages;
    private BlockingQueue<Message> incomingMessages;
    private BlockingQueue<Message> outgoingMessages;
    private Router router;
    private VirtualRouter vRouter;
    private ClientListener cl;
    private Thread routerThread;
    private Thread virtualRouterThread;

    private App(NetworkInfo netInfo) throws IOException, TimeoutException {
        externalMessages = new LinkedBlockingQueue<>();
        incomingMessages = new LinkedBlockingQueue<>();
        outgoingMessages = new LinkedBlockingQueue<>();

        router = new Router(netInfo, incomingMessages, outgoingMessages);
        vRouter = new VirtualRouter(netInfo, externalMessages, incomingMessages, outgoingMessages);
        cl = new ClientListener(externalMessages);

        routerThread = new Thread(router);
        virtualRouterThread = new Thread(vRouter);
    }

    private void start() {
        cl.start();
        routerThread.start();
        virtualRouterThread.start();
    }

    private void stop() throws InterruptedException {
        cl.stop();
        routerThread.interrupt();
        virtualRouterThread.interrupt();
        routerThread.join();
        virtualRouterThread.join();
    }

    public static void main(String[] args) throws IOException, InterruptedException, TimeoutException {
        if (args.length < 3) {
            System.err.println("Incorrect number or value of arguments.\n Usage: " +
                    "<path to dist>/overlay/bin/overlay <nodeID> <network file path> " +
                    "<log level in caps (TRACE, DEBUG, INFO, WARN, ERROR)> <log file path (optional)>");
            return;
        }
        int virtualID = Integer.parseInt(args[0]);
        System.setProperty(SimpleLogger.DEFAULT_LOG_LEVEL_KEY, args[2]);

        if (args.length == 4) {
            System.setProperty(SimpleLogger.LOG_FILE_KEY, args[3]);
        }

        Logger logger = LoggerFactory.getLogger(App.class);


        NetworkFileParser nfp = new NetworkFileParser(args[1]);

        NetworkInfo netInfo = new NetworkInfo(nfp.getHost(), nfp.getPort(), "defaultExchange", virtualID,
                nfp.getTags(), nfp.getPhysicalTopology(), nfp.getVirtualTopology());

        App app = new App(netInfo);
        app.start();
        logger.debug("Running with virtual ID: " + virtualID);

        Scanner in = new Scanner(System.in);
        logger.info("Enter Q for stopping the node.");
        String quit = in.nextLine();

        while (!quit.equalsIgnoreCase("q")) {
            logger.info("Enter Q for stopping the node.");
            quit = in.nextLine();
        }

        logger.debug("Stopping node...");
        app.stop();
        logger.debug("Node stopped.");
    }
}
